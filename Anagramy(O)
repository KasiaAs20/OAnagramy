def are_anagrams(s1,s2,s3):
    d1 = [0]*26
    d2 = [0]*26
    d3 = [0]*26

    for i in range(len(s1)):
        if s1[i] >= 'a' and s1[i] <= 'z':#jezeli s1 jest małą literą
            pos = ord(s1[i])-ord('a')#ord zwraca kod asci znaku,pos oblicza pozycje znaku w alfabecie
            d1[pos] = d1[pos] + 1 #d1[pos] oblicza ile poszczegolnych  liter sie znajduje
        if s1[i] >= 'A' and s1[i] <= 'Z':#jezeli s1 jest dużą literą
            pos = ord(s1[i]) - ord('A')
            d1[pos] = d1[pos] + 1
    for i in range(len(s2)):
        if s2[i] >= 'a' and s2[i] <= 'z':
            pos = ord(s2[i])-ord('a')
            d2[pos] = d2[pos] + 1
        if s2[i] >= 'A' and s2[i] <= 'Z':
            pos = ord(s2[i]) - ord('A')
            d2[pos] = d2[pos] + 1
    for i in range(len(s3)):
        if s3[i] >= 'a' and s3[i] <= 'z':
            pos = ord(s3[i])-ord('a')
            d3[pos] = d3[pos] + 1
        if s3[i] >= 'A' and s3[i] <= 'Z':
            pos = ord(s3[i]) - ord('A')
            d3[pos] = d3[pos] + 1


    j = 0
    Operation_OK = True
    while j<26 and Operation_OK:
        if d1[j]==d2[j]==d3[j]:#, jeśli trzy listy liczników są identyczne, łańcuchy muszą być anagramami.

            j = j + 1
        else:
            Operation_OK = False

    return Operation_OK